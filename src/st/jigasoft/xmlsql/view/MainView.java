/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package st.jigasoft.xmlsql.view;

import com.thoughtworks.xstream.XStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import st.jigasoft.dbutil.util.FilterableTableModel;
import st.jigasoft.dbutil.util.text.XTextName;
import st.jigasoft.dbutil.view.FileChooser;
import st.jigasoft.dbutil.view.callback.OnFileChoserAproved;
import st.jigasoft.xmldb.connect.Call;
import st.jigasoft.xmldb.connect.Conexao;
import st.jigasoft.xmldb.model.Column;
import st.jigasoft.xmldb.model.OnProcess;
import st.jigasoft.xmldb.model.SQLHeader;
import st.jigasoft.xmldb.model.SQLRow;
import st.jigasoft.xmldb.model.TreatText;
import st.jigasoft.xmldb.model.TreaterDate;
import st.jigasoft.xmldb.model.TreaterDecimal;
import st.jigasoft.xmldb.model.TreaterInteger;
import st.jigasoft.xmldb.model.TreaterNull;
import st.jigasoft.xmldb.model.XMLConverter;
import st.jigasoft.xmlsql.references.RText;

/**
 *
 * @author xdata
 */
public class MainView extends javax.swing.JFrame implements OnProcess{

    private FileChooser choser;
    private final XStream xStream;
    private final XMLConverter converter;
    private int iCountRow;
    private final SQLHeader header;
    private List<SQLRow> list;
    private Thread currentBackgroundProcess;
    private FilterableTableModel tableModel;
    private ViewLog viewLog;
    private int iCountWrite;
    
    
    /**
     * Creates new form Main
     */
    public MainView() {
        XTextName textName = new XTextName();
        textName.apllyText(RText.class, XTextName.ApplyMode.TREAT, XTextName.ApplyRange.CLASS_ONLY);
        this.viewLog = new ViewLog();
        
        this.xStream = new XStream();
        xStream.registerConverter(this.converter = new XMLConverter());
        
        this.converter.setOnProcessReader(this);
        this.header = new SQLHeader();
        this.tableModel = new FilterableTableModel();
        this.header.addTreaterValue(new TreaterNull());
        
        initComponents();
        this.choser = new FileChooser();
        this.choser.addOnAprovedListiner(new OnFileChoserAproved() {

            @Override
            public void accept(FileChooser t) {
                File f = t.getSelectedFile();
                String name = f.getName();
                edFileLocation.setText(f.getAbsolutePath());
                editXMLTag.setText(name.substring(0, name.length()-4));
                editTableName.setText(name.substring(0, name.length()-4));
            }
        });
        choser.addChoosableFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                String name = f.getName();
                return (name.length() >=5 &&
                        (
                           name.substring(name.length()-3, name.length()).toUpperCase().equals("XML")
                           ||name.substring(name.length()-3, name.length()).toUpperCase().equals("LXS")
                        ))
                        
                        || f.isDirectory();
           
            }

            @Override
            public String getDescription() 
            {
                return "(.XML, LXS)";
            }
        });
        CollumnView comp;
        
        this.panelTreater1.addTypeTreater(new TreatText("VARCHAR"));
        this.panelTreater1.addTypeTreater(new TreaterDate("DATE"));
        this.panelTreater1.addTypeTreater(new TreaterDecimal("FLOAT"));
        this.panelTreater1.addTypeTreater(new TreaterInteger("NUMBER"));
        this.panelTreater1.addTypeTreater(new TreaterDate("TIMESTAMP", "ddMMyyyy hh:mm:ss"));
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        editXMLTag = new st.jigasoft.dbutil.view.EditText();
        editTableName = new st.jigasoft.dbutil.view.EditText();
        edFileLocation = new st.jigasoft.dbutil.view.EditText();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        editUserDataBaseName = new st.jigasoft.dbutil.view.EditText();
        editHostName = new st.jigasoft.dbutil.view.EditText();
        editPassWord = new st.jigasoft.dbutil.view.EditText();
        editDocument = new st.jigasoft.dbutil.view.EditText();
        jButton5 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listColumns = new st.jigasoft.dbutil.view.VerticalListView();
        panelTreater1 = new st.jigasoft.xmlsql.view.PanelTreater();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        processProgress = new javax.swing.JProgressBar();
        progressValues = new javax.swing.JLabel();
        progressName = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        fiterableTable1 = new st.jigasoft.dbutil.view.FiterableTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        editXMLTag.setTextHint(RText.XML_TagName);
        editXMLTag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                editXMLTagKeyReleased(evt);
            }
        });

        editTableName.setTextHint(RText.DataBaseTableName);
        editTableName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTableNameActionPerformed(evt);
            }
        });

        edFileLocation.setEditable(false);
        edFileLocation.setTextHint(RText.XML_FileLocation);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Caregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 25, 0));
        jButton3.setFont(new java.awt.Font("Monospace Medium", 1, 14)); // NOI18N
        jButton3.setForeground(java.awt.Color.white);
        jButton3.setText("SAVE DB");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        editUserDataBaseName.setTextHint(RText.USER_DATA_BASE_NAME);

        editHostName.setTextHint(RText.HOST_ADDRESS);

        editPassWord.setTextHint(RText.PASS_WORD);

        editDocument.setText("HF_DOCUMENT");
        editDocument.setTextHint(RText.DOCUMMENT_LIST);

        jButton5.setText("XML");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(editDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editXMLTag, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editTableName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(edFileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addGap(38, 38, 38)
                .addComponent(editHostName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editUserDataBaseName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(editUserDataBaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(editHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(editPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(edFileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(editXMLTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(editTableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2)
                                .addComponent(editDocument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(listColumns);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTreater1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTreater1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        progressValues.setText("0");

        progressName.setText("ROWs:");

        jButton4.setText("Log");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("X");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, Short.MAX_VALUE)
                .addComponent(progressName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressValues, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(processProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(progressValues)
                        .addComponent(progressName)
                        .addComponent(jButton4))
                    .addComponent(processProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fiterableTable1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(fiterableTable1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setRightComponent(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        opemFileChoser();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void editTableNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTableNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editTableNameActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       this.loadXML();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void editXMLTagKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editXMLTagKeyReleased
        this.editXMLKeyUp();
    }//GEN-LAST:event_editXMLTagKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.saveDataBase();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.logCall();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.saveXML();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.cansel();
    }//GEN-LAST:event_jButton6ActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private st.jigasoft.dbutil.view.EditText edFileLocation;
    private st.jigasoft.dbutil.view.EditText editDocument;
    private st.jigasoft.dbutil.view.EditText editHostName;
    private st.jigasoft.dbutil.view.EditText editPassWord;
    private st.jigasoft.dbutil.view.EditText editTableName;
    private st.jigasoft.dbutil.view.EditText editUserDataBaseName;
    private st.jigasoft.dbutil.view.EditText editXMLTag;
    private st.jigasoft.dbutil.view.FiterableTable fiterableTable1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private st.jigasoft.dbutil.view.VerticalListView listColumns;
    private st.jigasoft.xmlsql.view.PanelTreater panelTreater1;
    private javax.swing.JProgressBar processProgress;
    private javax.swing.JLabel progressName;
    private javax.swing.JLabel progressValues;
    // End of variables declaration//GEN-END:variables

    private void opemFileChoser() {
        this.choser.showSaveDialog(this);
    }
    
    private void loadXML() {
        if(this.editXMLTag.isEmpty())  return;
        if(this.editTableName.isEmpty()) return;
        if(this.editDocument.isEmpty()) return;
        
        this.iCountRow = 0;
        this.progressName.setText(RText.ROWs+":");
        
        this.header.newDocument(this.editTableName.getText());
        xStream.alias(editXMLTag.getText(), SQLRow.class);
        String document = this.editDocument.getText();
        xStream.alias(document, ArrayList.class);
        
        this.processProgress.setIndeterminate(true);
        processProgress.setValue(0);
        processProgress.setMaximum(100);
        processProgress.setString("");
        processProgress.setStringPainted(false);
        
        File file = this.choser.getSelectedFile();
        
        if(currentBackgroundProcess != null
                && currentBackgroundProcess.isAlive())
        {
            currentBackgroundProcess.interrupt();
        }
        this.iCountRow = 0;
        
        this.currentBackgroundProcess = new Thread(new Runnable() {

            @Override
            public void run() {
                if(list != null) list.clear();
                Object object = xStream.fromXML(file);
                System.out.println("object has instace of "+object.getClass());
                if(object instanceof List)
                {
                    list = (List) object;
                    processProgress.setIndeterminate(false);
                    currentBackgroundProcess = null;
                }
                else JOptionPane.showMessageDialog(MainView.this, "O xml nao é uma heraca da listam ");
            }
        });
        
        currentBackgroundProcess.start();
        
    }

    private void editXMLKeyUp() {
        this.editTableName.setText(this.editXMLTag.getText());
    }

    @Override
    public void accept(SQLRow row) {
        
        if(iCountRow == 0)
        {
            try 
            {
                Thread th = new Thread(new Runnable() {
                    
                    @Override
                    public void run() {
                        header.accept(row);
                        listColumns.clearItem();
                        for(Column collumn: header.getColumns())
                        {
                            CollumnView collumnView;
                            listColumns.addItem(collumnView = new CollumnView(), collumn);
                            collumnView.setPanelTreat(panelTreater1);
                        }
                        
                        listColumns.updateUI();
                        tableModel.setColumn(header.columnAsTable());
                        tableModel.add(row);
                        tableModel.setEditable(true);
                        fiterableTable1.setModel(tableModel);
                    }
                });
                th.start();
                th.join();
                iCount();
                return;
            } catch (InterruptedException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        if(tableModel != null)
        {
            tableModel.add(row);
        }
        iCount();
    }

    private void iCount() {
        this.iCountRow ++;
        this.progressValues.setText(iCountRow+"");
    }

    private void saveDataBase() {
        if(currentBackgroundProcess != null
                && currentBackgroundProcess.isAlive())
        {
            currentBackgroundProcess.interrupt();
        }
        this.currentBackgroundProcess = new Thread(new Runnable() {

            @Override
            public void run() {
                Connection dataBaseConnection = null;
                Savepoint savepoint = null;
                
                try 
                {
                    String host = editHostName.getText();
                    String userDataBaseName = editUserDataBaseName.getText();
                    String passWord = editPassWord.getText();
                    
                    header.replaceTableName(editTableName.getText());
                    header.generateInsertSQL();
                    System.out.println(header.getSql());
                    int treatRow = 0;
                    processProgress.setMaximum(iCountRow);
                    
                    progressName.setText(RText.PROCCESSED+":");
                    processProgress.setStringPainted(true);
                    
                    NumberFormat formatter = NumberFormat.getInstance();
                    formatter.setMaximumFractionDigits(2);
                    formatter.setMinimumIntegerDigits(1);
                    
                    Conexao conexao = new Conexao(host, userDataBaseName, passWord);
                    dataBaseConnection = conexao.getCon();
                    dataBaseConnection.setAutoCommit(false);
                    
                    savepoint = dataBaseConnection.setSavepoint();
                    
                    if(!conexao.isConnected())
                    {
                        JOptionPane.showMessageDialog(MainView.this, "Falha ao connectar com a base de dados");
                    }
                    else
                    {
                        int auxCount = 0;
                        for(SQLRow sqll: list)
                        {
                            if(auxCount == 100){
                                dataBaseConnection.commit();
                                conexao.closeConect();
                                conexao.createNewConnection();
                                dataBaseConnection = conexao.getCon();
                                dataBaseConnection.setAutoCommit(false);
                                auxCount = 0;
                            }

                            //TODO salvar qui no banco de dados
                            boolean reg = Call.callStattment(header.getSql(), dataBaseConnection, header.prepare(sqll));
                            if(!reg)
                            {
                                JOptionPane.showMessageDialog(MainView.this, "Falha ao salvar no banco de dados\nOperacao abortada\nError:"+Call.lastMessage);
                                dataBaseConnection.rollback(savepoint);
                                break;
                            }
                            treatRow ++;
                            processProgress.setValue(treatRow);
                            progressValues.setText(treatRow+"/"+iCountRow);
                            String textFormatter =  formatter.format(processProgress.getPercentComplete()*100);
                            processProgress.setString(textFormatter+"%");
                            auxCount ++;
                        }
                        dataBaseConnection.commit();
                        conexao.closeConect();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(MainView.this, "Catch error\nFalha ao salvar no banco de dados\nError:"+ex.getMessage());
                    if(dataBaseConnection != null)
                    {
                        try 
                        {
                            dataBaseConnection.rollback(savepoint);
                        } catch (SQLException ex1) {
                            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                }
            }
        });
        this.currentBackgroundProcess.start();
        
    }

    private void logCall() {
        this.viewLog.setVisible(!this.viewLog.isVisible());
    }

    private void saveXML() {
        final NumberFormat formatter = NumberFormat.getInstance();
        formatter.setMaximumFractionDigits(2);
        formatter.setMinimumIntegerDigits(1);
         this.iCountWrite = 0;
         this.processProgress.setValue(0);
         this.processProgress.setMaximum(this.list.size());
         this.processProgress.setStringPainted(true);
         this.processProgress.setIndeterminate(false);
         progressName.setText(RText.PROCCESSED+":");
         
         this.converter.setOnProcessWrite(new OnProcess() {

             @Override
             public void accept(SQLRow t) {
                 System.out.println(t);
                 iCountWrite ++;
                 processProgress.setValue(iCountWrite);
                 String textFormatter =  formatter.format(processProgress.getPercentComplete()*100);
                 
                 processProgress.setString(textFormatter+"%");
                 progressValues.setText(list.size()+"/"+iCountWrite);
             }
         });
         this.processProgress.setValue(0);
         this.processProgress.setStringPainted(false);
         
         if(currentBackgroundProcess != null
                && currentBackgroundProcess.isAlive())
        {
            currentBackgroundProcess.interrupt();
        }
        this.currentBackgroundProcess = new Thread(new Runnable() {
            @Override
            public void run() {
                try 
                {
                    
                    String tablename = editTableName.getText();
                    File file = choser.getCurrentDirectory();
                    File fileOutXML = new File(file, tablename+".LXS");
                    FileOutputStream out;
                    xStream.toXML(list, out = new FileOutputStream(fileOutXML, false));
                    out.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        this.currentBackgroundProcess.start();
    }

    private void cansel() {
         if(currentBackgroundProcess != null
                && currentBackgroundProcess.isAlive())
        {
            currentBackgroundProcess.interrupt();
        }
         currentBackgroundProcess = null;
         
         this.progressValues.setText("");
         this.processProgress.setValue(0);
    }
}

